/*
 * This file is generated by jOOQ.
 */
package com.swanpipe.jooq.rx.tables;


import com.swanpipe.jooq.rx.Indexes;
import com.swanpipe.jooq.rx.Keys;
import com.swanpipe.jooq.rx.Public;
import com.swanpipe.jooq.rx.tables.records.LoginRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Login extends TableImpl<LoginRecord> {

    private static final long serialVersionUID = 1983756808;

    /**
     * The reference instance of <code>public.login</code>
     */
    public static final Login LOGIN = new Login();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LoginRecord> getRecordType() {
        return LoginRecord.class;
    }

    /**
     * The column <code>public.login.id</code>.
     */
    public final TableField<LoginRecord, String> ID = createField("id", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.login.account_id</code>.
     */
    public final TableField<LoginRecord, Integer> ACCOUNT_ID = createField("account_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.login.password</code>.
     */
    public final TableField<LoginRecord, String> PASSWORD = createField("password", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.login.enabled</code>.
     */
    public final TableField<LoginRecord, Boolean> ENABLED = createField("enabled", org.jooq.impl.SQLDataType.BOOLEAN.defaultValue(org.jooq.impl.DSL.field("true", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.login.created</code>.
     */
    public final TableField<LoginRecord, Timestamp> CREATED = createField("created", org.jooq.impl.SQLDataType.TIMESTAMP.defaultValue(org.jooq.impl.DSL.field("now()", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>public.login.last_successful_login</code>.
     */
    public final TableField<LoginRecord, Timestamp> LAST_SUCCESSFUL_LOGIN = createField("last_successful_login", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>public.login.last_failed_login</code>.
     */
    public final TableField<LoginRecord, Timestamp> LAST_FAILED_LOGIN = createField("last_failed_login", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * Create a <code>public.login</code> table reference
     */
    public Login() {
        this(DSL.name("login"), null);
    }

    /**
     * Create an aliased <code>public.login</code> table reference
     */
    public Login(String alias) {
        this(DSL.name(alias), LOGIN);
    }

    /**
     * Create an aliased <code>public.login</code> table reference
     */
    public Login(Name alias) {
        this(alias, LOGIN);
    }

    private Login(Name alias, Table<LoginRecord> aliased) {
        this(alias, aliased, null);
    }

    private Login(Name alias, Table<LoginRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Login(Table<O> child, ForeignKey<O, LoginRecord> key) {
        super(child, key, LOGIN);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.LOGIN_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<LoginRecord> getPrimaryKey() {
        return Keys.LOGIN_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<LoginRecord>> getKeys() {
        return Arrays.<UniqueKey<LoginRecord>>asList(Keys.LOGIN_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<LoginRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<LoginRecord, ?>>asList(Keys.LOGIN__LOGIN_ACCOUNT_ID_FKEY);
    }

    public Account account() {
        return new Account(this, Keys.LOGIN__LOGIN_ACCOUNT_ID_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Login as(String alias) {
        return new Login(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Login as(Name alias) {
        return new Login(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Login rename(String name) {
        return new Login(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Login rename(Name name) {
        return new Login(name, null);
    }
}
